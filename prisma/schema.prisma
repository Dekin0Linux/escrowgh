generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  name               String
  email              String        @unique
  password           String
  phone              String?       @unique
  isAdmin            Boolean       @default(false)
  createdAt          DateTime      @default(now())
  userCode           String?       @unique
  updatedAt          DateTime      @default(now())
  disputes           Dispute[]     @relation("UserDisputes")
  payments           Payment[]
  Settlement         Settlement[]
  buyerTransactions  Transaction[] @relation("BuyerTransactions")
  sellerTransactions Transaction[] @relation("SellerTransactions")
}

model Transaction {
  id               String            @id @unique @default(uuid())
  transCode        String            @unique
  title            String
  amount           Float
  status           TransactionStatus @default(PENDING)
  buyerId          String?
  sellerId         String? // 
  sellerMomoNumber String? // 
  itemImage        String?
  deliveryNumber   String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  releaseDate      DateTime?
  commissionFee    Float?
  currency         String            @default("GHS")
  isFunded         Boolean           @default(false)
  currentRole      String?           @default("BUYER")
  description      String?
  deliveryDate     DateTime?
  initiateBy       String            @default("BUYER")

  // Relations
  buyer  User?  @relation("BuyerTransactions", fields: [buyerId], references: [id])
  seller User? @relation("SellerTransactions", fields: [sellerId], references: [id])

  dispute    Dispute?
  Settlement Settlement[]
}

model Commission {
  id            String      @id @default(uuid())
  transactionId String      @unique
  transCode     String
  userCode      String?
  sellerPhone   String?
  commissionFee Float
  isPaid        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Dispute {
  id            String        @id @default(uuid())
  reason        String
  resolution    String?
  status        DisputeStatus @default(OPEN)
  userId        String
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  resolvedAt    DateTime?
  description   String?
  evidence      String?
  info          String?
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  user          User          @relation("UserDisputes", fields: [userId], references: [id])
}

model Payment {
  id            String        @id @default(uuid())
  transactionId String        @unique
  userId        String
  amount        Float
  paymentMethod String
  reference     String        @unique
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?     @default(now())
  initatedBy    String        @default("user")
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model Settlement {
  id            String         @id @default(uuid())
  transactionId String
  amount        Float
  createdAt     DateTime       @default(now())
  releasedTo    String
  type          SettlementType
  userId        String?
  transaction   Transaction    @relation(fields: [transactionId], references: [id])
  User          User?          @relation(fields: [userId], references: [id])
}

enum TransactionStatus {
  PENDING
  WAITING_FOR_BUYER_CONFIRMATION
  IN_ESCROW
  COMPLETED
  CANCELED
  DISPUTED
}

enum DisputeStatus {
  OPEN
  RESOLVED
  REJECTED
  INPROGRESS
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SettlementType {
  RELEASE_TO_SELLER
  REFUND_TO_BUYER
}
