generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  phone          String?   @unique
  isAdmin        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  userCode       String?   @unique
  updatedAt      DateTime  @default(now())
  dateRegistered DateTime  @default(now())
  isBlocked      Boolean   @default(false)
  isVerified     Boolean   @default(true)
  lastLoggedIn   DateTime?
  role           String    @default("user")
  userIp         String?
  userLocation   String?
  loginAttempts  Float?
  expoToken      String?

  disputes           Dispute[]            @relation("UserDisputes")
  payments           Payment[]
  Settlement         Settlement[]
  buyerTransactions  Transaction[]        @relation("BuyerTransactions")
  sellerTransactions Transaction[]        @relation("SellerTransactions")
  notificationTokens NotificationTokens[]

  disputesAsBuyer  Dispute[] @relation("BuyerDisputes")
  disputesAsSeller Dispute[] @relation("SellerDisputes")
}

model Transaction {
  id        String            @id @unique @default(uuid())
  transCode String            @unique
  title     String
  amount    Float
  status    TransactionStatus @default(PENDING)

  // PARTIES
  buyerId           String?
  sellerId          String?
  sellerMomoNumber  String?
  counterpartyPhone String?
  currentRole       String? @default("BUYER")
  initiateBy        String? @default("BUYER")

  // acceptance flow
  initiatorAccepted    Boolean @default(true) // creator automatically accepts
  counterpartyAccepted Boolean @default(false) // must accept before payment

  // escrow details
  itemImage      String?
  deliveryNumber String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  releaseDate    DateTime?
  commissionFee  Float?
  isFunded       Boolean   @default(false)
  currency       String    @default("GHS")
  description    String?
  deliveryDate   DateTime?

  // RELATIONS
  commission Commission?
  dispute    Dispute?
  payment    Payment?
  Settlement Settlement[]
  buyer      User?        @relation("BuyerTransactions", fields: [buyerId], references: [id])
  seller     User?        @relation("SellerTransactions", fields: [sellerId], references: [id])
}

model Commission {
  id            String      @id @default(uuid())
  transactionId String      @unique
  transCode     String
  userCode      String?
  sellerPhone   String?
  commissionFee Float
  isPaid        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Dispute {
  id            String        @id @default(uuid())
  reason        String
  resolution    String?
  status        DisputeStatus @default(OPEN)
  userId        String
  transactionId String        @unique
  createdAt     DateTime      @default(now())
  resolvedAt    DateTime?
  description   String?
  evidence      String?
  info          String?
  disputeNo     String?

  // PARTIES
  buyerId  String?
  sellerId String?

  transaction Transaction @relation(fields: [transactionId], references: [id])
  user        User        @relation("UserDisputes", fields: [userId], references: [id])
  buyer       User?       @relation("BuyerDisputes", fields: [buyerId], references: [id])
  seller      User?       @relation("SellerDisputes", fields: [sellerId], references: [id])
}

model Payment {
  id            String        @id @default(uuid())
  transactionId String        @unique
  userId        String
  amount        Float
  paymentMethod String
  reference     String        @unique
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?     @default(now())
  initatedBy    String        @default("user")
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model Settlement {
  id            String         @id @default(uuid())
  transactionId String
  amount        Float
  createdAt     DateTime       @default(now())
  releasedTo    String
  type          SettlementType
  userId        String?
  transaction   Transaction    @relation(fields: [transactionId], references: [id])
  User          User?          @relation(fields: [userId], references: [id])
}

model NotificationTokens {
  id        String @id @default(uuid())
  userId    String
  expoToken String

  user User @relation(fields: [userId], references: [id])
}

enum TransactionStatus {
  PENDING
  ACCEPTED
  IN_ESCROW
  COMPLETED
  CANCELED
  DISPUTED
  WAITING_FOR_BUYER_CONFIRMATION
}

enum DisputeStatus {
  OPEN
  RESOLVED
  REJECTED
  INPROGRESS
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SettlementType {
  RELEASE_TO_SELLER
  REFUND_TO_BUYER
}

// npx prisma migrate dev --name add_user_ip_location
// npx prisma migrate deploy
// npx prisma generate
// npx prisma db push
